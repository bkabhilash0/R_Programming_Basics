class(tmp[-1,])
tmp[-1,]
tmp[:1,]
tmp[6,]
(tmp$dob[6])
class(tmp$dob[6])
tmp$dob[6]
tmp$dob
tmp$dob
tmp$dob[6]
class(tmp$dob[6])
class(tmp[6,])
tmp$dob
tmp <- rbind(students,c("S06","Anitha",22,x,"Maths"))
x <- "202-10-15"
students
str(tmp)
tmp
x <- "202-10-15"
tmp <- rbind(students,c("S06","Anitha",22,x,"Maths"))
str(tmp)
tmp
x <- "2022-15-15"
tmp <- rbind(students,c("S06","Anitha",22,x,"Maths"))
x <- "2022-12-15"
tmp <- rbind(students,c("S06","Anitha",22,x,"Maths"))
str(tmp)
tmp
tmp$dob[1]
tmp$dob[1]#month
tmp$dob[1]$motnh
tmp$dob[1]$mon
tmp$dob[1]$month
tmp$dob[1]day
students <- data.frame(
stu_id = c(1:5),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10")),
stringsAsFactors = FALSE
)
students
emp <- data.frame(
emp_id = c(1:5),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10"),
salary = c(50000,60000,70000,80000,90000)
),
stringsAsFactors = FALSE
)
emp
emp <- data.frame(
emp_id = c(1:5),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10"),
salary = c(50000,60000,70000,80000,90000))
stringsAsFactors = FALSE
emp <- data.frame(
emp_id = c(1:5),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10"),
salary = c(50000,60000,70000,80000,90000)),
stringsAsFactors = FALSE
)
emp
emp <- data.frame(
emp_id = c(1:5),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10")),
salary = c(50000,60000,70000,80000,90000),
stringsAsFactors = FALSE
)
emp
emp[c(3,5),c(1,3)]
emp["dob"]
emp["experience"] <- c(1,2,3,4,5)
emp
emp <- rbind(emp,c(6,"Anitha","2001-03-08",100000,6))
emp
# Remove a col
emp[c("experience")]
# Remove a col
emp[-c("experience")]
# Remove a col
subset(emp,drop = c(experience))
# Remove a col
subset(emp,drop = c("experience"))
# Remove a col
subset(emp,select = -c("experience"))
# Remove a col
subset(emp,select = -c(experience))
# Remove a col
emp[-c(experience)]
# Remove a col
emp[-c(experience)]
# Remove a col
subset(emp,select = -c(experience))
# Remove a col
emp <- subset(emp,select = -c(experience))
emp
emp[c(-6),:]
emp[c(-6),]
emp <- emp[c(-6),]
emp
order(emp$name,decreasing = TRUE)
emp[order(emp$name,decreasing = TRUE),]
emp[order(emp$name,decreasing = TRUE),]
#  Illustrate how two data frames can be combined horizontally and vertically.
emp_2 <- data.frame(
emp_id = c(6:10),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10")),
salary = c(50000,60000,70000,80000,90000),
stringsAsFactors = FALSE
)
rbind(emp,emp_2)
cbind(emp,emp_2)
df_2 <- data.frame(id )
id<-c(1:7)
weight<-c(20,27,24,22,23,25,28)
gender<-c("male","female","female","male","male","female","male")
smoking<-c("no","yes","no","yes","yes","no","yes")
tumour<-c("small","large","medium","large","medium","large","small")
df_2 <- data.frame(id )
df_2
df_2 <- data.frame(id,weight,gender,smoking,tumour)
df_2
subset(df_2,(smoking == "yes"))
subset(df_2,(smoking == "yes") & tumour == "large")
qqplot(df_2$gender,df_2$weight)
subset(df_2,(smoking == "yes") & tumour == "large")
barplot(df_2$gender,df_2$weight)
subset(df_2,(smoking == "yes") & tumour == "large")
View(df_2)
class(df_2)
typeof(df_2)
str(df_2)
summary(df_2)
structure(df_2)
structure(df_2)
class(df_2)
typeof(df_2)
structure(df_2)
str(df_2)
df_2 <- data.frame(id,weight,gender,smoking,tumour)
df_2
subset(df_2,(smoking == "yes") & tumour == "large")
class(df_2)
typeof(df_2)
structure(df_2)
str(df_2)
summary(df_2)
emp[c(3,5),c(name)]
emp[c(3,5),c("name")]
emp[c(3,5),c("name","salary")]
df_2[df_2$gender]
df_2(df_2$gender)
df_2 <- data.frame(id,weight,gender,smoking,tumour)
df_2
subset(df_2,(smoking == "yes") & tumour == "large")
class(df_2)
typeof(df_2)
structure(df_2)
str(df_2)
summary(df_2)
df_2(df_2$gender)
subset(df_2,select = [id,tumour])
subset(df_2,select = c(id,tumour)
subset(df_2,select = c(id,tumour)
subset(df_2,select = c(id,tumour))
sub <- subset(df_2,select = c(id,tumour))
sub
students <- data.frame(
stu_id = c("S01","S02","S03","S04","S05"),
name = c("Abhilash","Ajay","Akshaya","Aleena","Amal"),
age = c(22,22,23,22,21),
dob = as.Date(c("2001-05-27","2001-08-10","2000-02-10","2001-08-10","2002-01-10")),
stringsAsFactors = FALSE
)
students
summary(students)
str(students)
data.frame(students$name,students$dob)
students[1:2,]
students[,1:2]
# Add a column
students$stream <- c("Physics","BCA","Maths","Statistics","Maths")
students
students$dob[1]
floor((Sys.Date() - students$dob[1])/366)
students[students$age > 22]
subset(students,(age > 21) & (stream == "Physics"))
students
x <- "2022-12-15"
tmp <- rbind(students,c("S06","Anitha",22,x,"Maths"))
str(tmp)
tmp$dob[1]day
tmp$dob[1]
myData <- data.frame(id,weight,gender,smoking,tumour)
myData
r <- list(8,26,"male","yes","small")
myData <- rbind(myData,r)
myData
c <- c("ker","guj","Punjab","TN","Assam",'Karnataka',"Delhi","Pune")
myData <- cbind(myData,c)
myData
myData1 <- data.frame(myData$id,myData$smoking)
myData1
myData[c(-1)]
myData[c(-1),]
myData[,-1]
names(myData)
head(myData)
head(myData)
head(myData,3)
edit(myData)
myData2 <- (id=c(2:8),bp=c("low","high","norm","low","high","low","high"),bmi=c("low","high","norm","low","high","norm","low"))
myData2 <- data.frame(id=c(2:8),bp=c("low","high","norm","low","high","low","high"),bmi=c("low","high","norm","low","high","norm","low"))
myData2
myData
merge(myData,myData2)
merge(myData,myData2,by="id")
myData[order(weight)]
myData[order(weight),]
t(myData)
split(myData,smoking)
myData
split(myData,smoking)
is.factor(myData$gender)
myData$gender <- factor(myData$gender)
is.factor(myData$gender)
summary(myData)
levels(myData$gender)
levels(myData$gender)
myData$gender
myData$gender[7] <- "TG"
levels(myData$gender) <- c(levels(myData$gender),"TG")
myData$gender[7] <- "TG"
myData
g_factors <- gl(3,5,labels = c("MCA","BCA","BTech"))
g_factors
readLines()
print(getcwd())
print(getwd())
myFile <- read.csv("./data1.csv")
myFile
summary(myFile)
nrows(myFile)
nrow(myFile)
ncol(myFile)
max(myFile$salary)
subset(myFile$salary == max(myFile$salary))
q <- subset(myFile$salary == max(myFile$salary))
subset(myFile,salary == max(myFile$salary))
subset(myFile,dept=='IT')
myFile$dept
subset(myFile,dept=='IT  ')
subset(myFile,dept=='IT  ')
age = readline(prompt = "Enter Your Age")
cat("The Age is",age)
data(iris)
summary(iris)
mysepal<-iris$Sepal.Length
mysepal
range_iris<-function(x){
range_values<-max(x)-min(x)
return(range_values)
}
sepl_range<-range_iris(mysepal)
sepl_range
cat('range of sepal length is :',sepl_range)
mean_sepal <- mean(mysepal)
# Compute the median of sepal length
median_sepal<- median(mysepal)
mode_sepal_length <- function(x) {
unique_values <- unique(x)
frequencies <- tabulate(match(x, unique_values))
mode_value <- unique_values[which.max(frequencies)]
return(mode_value)
}
mode_sepl<-mode_sepal_length(mysepal)
cat("Mean of Sepal Length:", mean_sepal, "\n")
cat("Median of Sepal Length:", median_sepal, "\n")
cat("Mode of Sepal Length:", mode_sepl, "\n")
range_sepal_length <- max(mysepal) - min(mysepal)
IQR_sepal_length <- IQR(mysepal)
# Compute the mean deviation of sepal length
mean_deviation_sepal_length <- mean(abs(mysepal- mean(mysepal)))
# Compute the standard deviation of sepal length
standard_deviation_sepal_length <- sd(mysepal)
# Print the results
cat("Range of Sepal Length:", range_sepal_length, "\n")
cat("Interquartile Range of Sepal Length:", IQR_sepal_length, "\n")
cat("Mean Deviation of Sepal Length:", mean_deviation_sepal_length, "\n")
cat("Standard Deviation of Sepal Length:", standard_deviation_sepal_length, "\n")
q1 <- quantile(mysepal, probs = 0.25)
q3 <- quantile(mysepal, probs = 0.75)
cat('first quartile:',q1,'second quartile:',q3)
data <- seq(from = 10, to = 100, by = 10)
# Calculate the 10th and 90th percentiles
percentile_10 <- quantile(data, probs = 0.1)
percentile_90 <- quantile(data, probs = 0.9)
cat("10th percentile:", percentile_10, "\n")
cat("90th percentile:", percentile_90, "\n")
# Create the sample data
data1 <- c(5, 1, 3, 9, 7, 1, 6, 11, 5, 1, 1, 3, 2, 1, 8)
mode_result <- mode(data1)
# Compute the frequencies of elements using the table() function
frequency_table <- table(data1)
cat("Mode:", mode_result, "\n")
cat("Frequency Table:\n")
print(frequency_table)
data("LakeHuron")
LakeHuron
percentile_90 <- quantile(LakeHuron, probs = 0.9)
# Compute the 1st, 2nd, and 3rd quartiles
quartiles <- quantile(LakeHuron, probs = c(0.25, 0.5, 0.75))
# Compute the minimum and maximum values
minimum_value <- min(LakeHuron)
maximum_value <- max(LakeHuron)
# Compute the mean and median
mean_value <- mean(LakeHuron)
median_value <- median(LakeHuron)
# Print the results
cat("90th percentile:", percentile_90, "\n")
cat("1st quartile:", quartiles[1], "\n")
cat("2nd quartile (median):", quartiles[2], "\n")
cat("3rd quartile:", quartiles[3], "\n")
cat("Minimum value:", minimum_value, "\n")
cat("Maximum value:", maximum_value, "\n")
cat("Mean:", mean_value, "\n")
cat("Median:", median_value, "\n")
# Function to read a numeric vector from the console
read_numeric_vector <- function() {
cat("Enter the elements of the vector (separated by spaces): ")
input <- readline()
vector <- as.numeric(strsplit(input, " ")[[1]])
return(vector)
}
# Function to sort a numeric vector in ascending order and multiply each element by two
sort_and_multiply <- function(vector) {
sorted_vector <- sort(vector)
multiplied_vector <- sorted_vector * 2
return(multiplied_vector)
}
# Main program
vector <- read_numeric_vector()
sorted_and_multiplied <- sort_and_multiply(vector)
cat("Sorted and multiplied vector: ")
print(sorted_and_multiplied)
# Function to read an alphanumeric vector from the console
read_alphanumeric_vector <- function() {
cat("Enter the elements of the vector (separated by spaces): ")
input <- readline()
vector <- strsplit(input, " ")[[1]]
return(vector)
}
# Function to keep only the numbers in an alphanumeric vector
keep_only_numbers <- function(vector) {
numbers <- vector[grepl("\\d+", vector)]
return(numbers)
}
# Main program
vector <- read_alphanumeric_vector()
numbers_only <- keep_only_numbers(vector)
cat("Numbers only: ")
print(numbers_only)
print(as.integer(numbers_only))
cat("Sorted and Multiplied: ",sort_and_multiply(as.integer(numbers_only)))
#  Write a R program to find the levels of factor of a given vector.
gender <- factor(c("Assistant",'Associate','Professor','HOD'))
class(gender)
levels(gender)
#  Write a R program to find the levels of factor of a given vector.
rols <- factor(c("Assistant",'Associate','Professor','HOD'))
class(roles)
#  Write a R program to find the levels of factor of a given vector.
roles <- factor(c("Assistant",'Associate','Professor','HOD'))
class(roles)
levels(roles)
#  Write a R program to find the levels of factor of a given vector.
roles <- factor(c("Assistant",'Associate','Professor','HOD'),levels = c("Assistant",'Associate','Professor','HOD'))
class(roles)
levels(roles)
#  Write a R program to find the levels of factor of a given vector.
gender <- factor(c("Male",'Male','Female','Male','Female','Female'))
class(gender)
levels(gender)
# Write a R program to change the first level of a factor with another level of a given factor.
str(gender)
# Write a R program to change the first level of a factor with another level of a given factor.
levels(gender)[1]
# Write a R program to change the first level of a factor with another level of a given factor.
levels(gender)[1] = "Other"
gender
class(gender)
levels(gender)
str(gender)
months()
months_fac <- c("March","April","January","November","January",
"September","October","September","November","August","February",
"January","November","November","February","May","August","February",
"July","December","August","August","September","November","September",
"February","April")
months_fac <- factor(months_fac)
months_fac
levels(months_fac)
table(months_fac)
responses <- factor(c("Agree", "Agree", "Strongly Agree", "Disagree", "Agree"))
levels(responses)
levels(responses) <- c(levels(responses),"Strongly Disagree")
levels(responses)
x <- factor(c("high", "low", "medium", "high", "high", "low", "medium"))
table(x)
unique(x)
as.numeric(unique(x))
data.frame(levels=unique(x),value=as.numeric(unique(x)))
plot(cars)
options(tinytex.verbose = TRUE)
mean_1 <- 22
std <- sqrt(25)
pnorm(27.5,mean = mean_1,sd = std) - pnorm(16.2,mean = mean_1,sd = std)
1 - pnorm(29,mean = mean_1,sd = std)
pnorm(17,mean = mean_1,sd = std)
pnorm(17,mean = mean_1,sd = std)
pnorm(15,mean = mean_1,sd = std) + (1- pnorm(25,mean = mean_1,sd = std))
dbinom(20, size=60, prob=0.5) + dbinom(25, size=60, prob=0.5) + dbinom(30, size=60, prob=0.5)
dbinom(20,size = 60,prob = 0.5)
pbinom(20,size = 60,prob = 0.5)
pbinom(30, size=60, prob=0.5) - pbinom(20, size=60, prob=0.5)
ppois(5,lambda = 7)
1 - ppois(10, lambda=7)
ppois(16, lambda=7) - ppois(4, lambda=7)
heights <- rnorm(1000,1.70,0.1)
library(ggplot)
library(ggplot2)
hist(heights)
hist(heights,xlab = "Height")
ggplot(data = heights,mapping = aes(x = heights)) + geom_histogram()
# hist(heights,xlab = "Height")
ggplot(mapping = aes(x = heights)) + geom_histogram()
hist(heights,xlab = "Height")
heights_2 <- rnorm(10000,1.70,0.1)
hist(heights,xlab = "Height")
hist(heights_2,col="red")
hist(heights_2,col="red",add=TRUE)
heights_2 <- rnorm(10000,1.70,0.1)
hist(heights,xlab = "Height")
hist(heights_2,col="red",add=TRUE)
# hist(heights,xlab = "Height")
plot(heights)
# hist(heights,xlab = "Height")
plot(heights,frame=FALSE)
# hist(heights,xlab = "Height")
plot(density(heights),frame=FALSE)
# hist(heights,xlab = "Height")
plot(density(heights))
FALSE
# hist(heights,xlab = "Height")
plot(density(heights),frame=FALSE)
# hist(heights,xlab = "Height")
plot(density(heights),frame=FALSE,main = "Density Plot")
# hist(heights,xlab = "Height")
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
heights_2 <- rnorm(10000,1.70,0.1)
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
lines(density(heights_2))
heights_2 <- rnorm(10000,1.70,0.1)
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
lines(density(heights_2))
heights_2 <- rnorm(10000,1.70,0.1)
plot(density(heights),frame=FALSE,main = "Density Plot",xlab = "Heights")
lines(density(heights_2),col="red")
1/6
1%>%6
1%/%6
dbinom(10,100,1/6)
1 - dbinom(10,100,1/6)
1 - dbinom(20,100,1/6)
pbinom(10,100,1/6)
rbinom(10,10,0.3)
rbinom(5,10,0.3)
rbinom(10,10,0.3)
5. Using the function rbinom to generate 10 unfair coin tosses with probability success of 0.3. Set the seed to 1.
rbinom(10,1,0.3)
set.seed(1)
rbinom(10,1,0.3)
heights <- rnorm(100,1.70,0.1)
pnorm(1.90,1.70,0.1)
1 - pnorm(1.60,1.70,0.1)
rolls <- rbinom(1,100,1/6)
rolls
rolls <- rbinom(1,100,1/6)
rolls
dice.simu.plot()
dice(1)
library(dice)
norm_dist <- pnorm(5,0,1)
norm_dist
norm_dist <- pnorm(3,0,1)
norm_dist
cdf <- pnorm(3,0,1)
cdf
pdf <- dnorm(3,0,1)
pdf
cat("Sample Function Output:",sample(x=10,size = 9,replace = TRUE),"\n");
cat("Runif Function Output:",runif(n = 9,min = 10,max = 100),"\n");
cat("Rnorm Function Output:",rnorm(n = 9,mean = 0, sd = 1))
cat("Sample Function Output:",sample(x=10,size = 9,replace = TRUE),"\n");
cat("Runif Function Output:",runif(n = 9,min = 10,max = 100),"\n");
cat("Rnorm Function Output:",rnorm(n = 9,mean = 0, sd = 1))
